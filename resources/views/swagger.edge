<!doctype html>
<html>

<head>
    <title>Stores API</title>
    <style type="text/css">
        body {
            font-family: Trebuchet MS, sans-serif;
            font-size: 15px;
            color: #444;
            margin-right: 24px;
        }

        h1 {
            font-size: 25px;
        }

        h2 {
            font-size: 20px;
        }

        h3 {
            font-size: 16px;
            font-weight: bold;
        }

        hr {
            height: 1px;
            border: 0;
            color: #ddd;
            background-color: #ddd;
        }

        .app-desc {
            clear: both;
            margin-left: 20px;
        }

        .param-name {
            width: 100%;
        }

        .license-info {
            margin-left: 20px;
        }

        .license-url {
            margin-left: 20px;
        }

        .model {
            margin: 0 0 0px 20px;
        }

        .method {
            margin-left: 20px;
        }

        .method-notes {
            margin: 10px 0 20px 0;
            font-size: 90%;
            color: #555;
        }

        pre {
            padding: 10px;
            margin-bottom: 2px;
        }

        .http-method {
            text-transform: uppercase;
        }

        pre.get {
            background-color: #0f6ab4;
        }

        pre.post {
            background-color: #10a54a;
        }

        pre.put {
            background-color: #c5862b;
        }

        pre.delete {
            background-color: #a41e22;
        }

        .huge {
            color: #fff;
        }

        pre.example {
            background-color: #f3f3f3;
            padding: 10px;
            border: 1px solid #ddd;
        }

        code {
            white-space: pre;
        }

        .nickname {
            font-weight: bold;
        }

        .method-path {
            font-size: 1.5em;
            background-color: #0f6ab4;
        }

        .up {
            float: right;
        }

        .parameter {
            width: 500px;
        }

        .param {
            width: 500px;
            padding: 10px 0 0 20px;
            font-weight: bold;
        }

        .param-desc {
            width: 700px;
            padding: 0 0 0 20px;
            color: #777;
        }

        .param-type {
            font-style: italic;
        }

        .param-enum-header {
            width: 700px;
            padding: 0 0 0 60px;
            color: #777;
            font-weight: bold;
        }

        .param-enum {
            width: 700px;
            padding: 0 0 0 80px;
            color: #777;
            font-style: italic;
        }

        .field-label {
            padding: 0;
            margin: 0;
            clear: both;
        }

        .field-items {
            padding: 0 0 15px 0;
            margin-bottom: 15px;
        }

        .return-type {
            clear: both;
            padding-bottom: 10px;
        }

        .param-header {
            font-weight: bold;
        }

        .method-tags {
            text-align: right;
        }

        .method-tag {
            background: none repeat scroll 0% 0% #24A600;
            border-radius: 3px;
            padding: 2px 10px;
            margin: 2px;
            color: #FFF;
            display: inline-block;
            text-decoration: none;
        }
    </style>
</head>

<body>
    <h1>Stores API</h1>
    <div class="app-desc">Future Adonis API</div>
    <div class="app-desc">More information: <a href="https://helloreverb.com">https://helloreverb.com</a></div>
    <div class="app-desc">Contact Info: <a href="danieelvaraujo@hotmail.com">danieelvaraujo@hotmail.com</a></div>
    <div class="app-desc">Version: 1.0.0</div>
    <div class="app-desc">BasePath:/DANIEELVARAUJO_1/Future-Adonis/1.0.0</div>
    <div class="license-info">Apache 2.0</div>
    <div class="license-url">http://www.apache.org/licenses/LICENSE-2.0.html</div>
    <h2>Access</h2>

    <h2><a name="__Methods">Methods</a></h2>
    [ Jump to <a href="#__Models">Models</a> ]

    <h3>Table of Contents </h3>
    <div class="method-summary"></div>
    <h4><a href="#Default">Default</a></h4>
    <ul>
        <li><a href="#checkIsOpen"><code><span class="http-method">get</span> /stores/is_open</code></a></li>
        <li><a href="#createStore"><code><span class="http-method">post</span> /stores</code></a></li>
        <li><a href="#deleteStore"><code><span class="http-method">delete</span> /stores/:id</code></a></li>
        <li><a href="#getStore"><code><span class="http-method">get</span> /stores/:id</code></a></li>
        <li><a href="#getStoresList"><code><span class="http-method">get</span> /stores</code></a></li>
        <li><a href="#updateStore"><code><span class="http-method">put</span> /stores/:id</code></a></li>
    </ul>

    <h1><a name="Default">Default</a></h1>
    <div class="method"><a name="checkIsOpen"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="get"><code class="huge"><span class="http-method">get</span> /stores/is_open</code></pre>
        </div>
        <div class="method-summary">check is a existing store is open at the requested time (<span
                class="nickname">checkIsOpen</span>)</div>
        <div class="method-notes">Get method is 2 query params</div>

        <h3 class="field-label">Query parameters</h3>
        <div class="field-items">
            <div class="param">store (optional)</div>

            <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash; The id of the store to check
            </div>
            <div class="param">data (optional)</div>

            <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash; The date as DateTime to
                check </div>
        </div> <!-- field-items -->


        <h3 class="field-label">Return type</h3>
        <div class="return-type">

            Object
        </div>

        <h3 class="field-label">Example data</h3>
        <div class="example-data-content-type">Content-Type: application/json</div>
        <pre class="example"><code>{ }</code></pre>

        <h3 class="field-label">Produces</h3>
        This API call produces the following media types according to the <span class="header">Accept</span> request
        header;
        the media type will be conveyed by the <span class="header">Content-Type</span> response header.
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        the store is open
        <a href="#Object">Object</a>
        <h4 class="field-label">404</h4>
        the store is closed
        <a href="#Object">Object</a>
    </div> <!-- method -->
    <hr />
    <div class="method"><a name="createStore"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="post"><code class="huge"><span class="http-method">post</span> /stores</code></pre>
        </div>
        <div class="method-summary">create a new store (<span class="nickname">createStore</span>)</div>
        <div class="method-notes">Adds a store to the system</div>


        <h3 class="field-label">Consumes</h3>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request
        header:
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Request body</h3>
        <div class="field-items">
            <div class="param">body <a href="#Store">Store</a> (optional)</div>

            <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Inventory item to add </div>
        </div> <!-- field-items -->

        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        item created
        <a href="#"></a>
        <h4 class="field-label">400</h4>
        invalid input, object invalid
        <a href="#"></a>
        <h4 class="field-label">409</h4>
        an existing item already exists
        <a href="#"></a>
    </div> <!-- method -->
    <hr />
    <div class="method"><a name="deleteStore"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="delete"><code class="huge"><span class="http-method">delete</span> /stores/:id</code></pre>
        </div>
        <div class="method-summary">delete a store (<span class="nickname">deleteStore</span>)</div>
        <div class="method-notes">Deletes the store if it exists</div>

        <h3 class="field-label">Return type</h3>
        <div class="return-type">
            array[<a href="#Store">Store</a>]

        </div>

        <!--Todo: process Response Object and its headers, schema, examples -->

        <h3 class="field-label">Example data</h3>
        <div class="example-data-content-type">Content-Type: application/json</div>
        <pre class="example"><code>[ {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
}, {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
} ]</code></pre>

        <h3 class="field-label">Produces</h3>
        This API call produces the following media types according to the <span class="header">Accept</span> request
        header;
        the media type will be conveyed by the <span class="header">Content-Type</span> response header.
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        the store is deleted

        <h4 class="field-label">404</h4>
        a message with not found is received
        <a href="#"></a>
    </div> <!-- method -->
    <hr />
    <div class="method"><a name="getStore"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="get"><code class="huge"><span class="http-method">get</span> /stores/:id</code></pre>
        </div>
        <div class="method-summary">get a list of single store (<span class="nickname">getStore</span>)</div>
        <div class="method-notes">Simple get method to return a store</div>

        <h3 class="field-label">Return type</h3>
        <div class="return-type">
            array[<a href="#Store">Store</a>]

        </div>

        <!--Todo: process Response Object and its headers, schema, examples -->

        <h3 class="field-label">Example data</h3>
        <div class="example-data-content-type">Content-Type: application/json</div>
        <pre class="example"><code>[ {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
}, {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
} ]</code></pre>

        <h3 class="field-label">Produces</h3>
        This API call produces the following media types according to the <span class="header">Accept</span> request
        header;
        the media type will be conveyed by the <span class="header">Content-Type</span> response header.
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        a store is returned

        <h4 class="field-label">404</h4>
        a message with not found is received
        <a href="#"></a>
    </div> <!-- method -->
    <hr />
    <div class="method"><a name="getStoresList"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="get"><code class="huge"><span class="http-method">get</span> /stores</code></pre>
        </div>
        <div class="method-summary">get a list of all existing stores (<span class="nickname">getStoresList</span>)
        </div>
        <div class="method-notes">Simple get method to return the list of stores</div>







        <h3 class="field-label">Return type</h3>
        <div class="return-type">
            array[<a href="#Store">Store</a>]

        </div>

        <!--Todo: process Response Object and its headers, schema, examples -->

        <h3 class="field-label">Example data</h3>
        <div class="example-data-content-type">Content-Type: application/json</div>
        <pre class="example"><code>[ {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
}, {
  "document" : 12345678912345,
  "id" : 1,
  "title" : "Mc Donalds",
  "businessType" : {
    "type" : "lanchonete"
  }
} ]</code></pre>

        <h3 class="field-label">Produces</h3>
        This API call produces the following media types according to the <span class="header">Accept</span> request
        header;
        the media type will be conveyed by the <span class="header">Content-Type</span> response header.
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        a list of stores is returned

        <h4 class="field-label">404</h4>
        a message with not found is received
        <a href="#"></a>
    </div> <!-- method -->
    <hr />
    <div class="method"><a name="updateStore"></a>
        <div class="method-path">
            <a class="up" href="#__Methods">Up</a>
            <pre class="put"><code class="huge"><span class="http-method">put</span> /stores/:id</code></pre>
        </div>
        <div class="method-summary">update an existing store (<span class="nickname">updateStore</span>)</div>
        <div class="method-notes">Updates a store existing in the system</div>


        <h3 class="field-label">Consumes</h3>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request
        header:
        <ul>
            <li><code>application/json</code></li>
        </ul>

        <h3 class="field-label">Request body</h3>
        <div class="field-items">
            <div class="param">body <a href="#Store">Store</a> (optional)</div>

            <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Inventory item to add </div>
        </div> <!-- field-items -->





        <!--Todo: process Response Object and its headers, schema, examples -->



        <h3 class="field-label">Responses</h3>
        <h4 class="field-label">200</h4>
        item updated
        <a href="#"></a>
        <h4 class="field-label">400</h4>
        invalid input, object invalid
        <a href="#"></a>
        <h4 class="field-label">409</h4>
        an existing item already exists
        <a href="#"></a>
    </div> <!-- method -->
    <hr />

    <h2><a name="__Models">Models</a></h2>
    [ Jump to <a href="#__Methods">Methods</a> ]

    <h3>Table of Contents</h3>
    <ol>
        <li><a href="#BusinessType"><code>BusinessType</code></a></li>
        <li><a href="#Store"><code>Store</code></a></li>
    </ol>

    <div class="model">
        <h3><a name="BusinessType"><code>BusinessType</code></a> <a class="up" href="#__Models">Up</a></h3>

        <div class="field-items">
            <div class="param">type </div>
            <div class="param-desc"><span class="param-type"><a href="#string">String</a></span> </div>
            <div class="param-desc"><span class="param-type">example: lanchonete</span></div>
        </div> <!-- field-items -->
    </div>
    <div class="model">
        <h3><a name="Store"><code>Store</code></a> <a class="up" href="#__Models">Up</a></h3>

        <div class="field-items">
            <div class="param">id </div>
            <div class="param-desc"><span class="param-type"><a href="#BigDecimal">BigDecimal</a></span> </div>
            <div class="param-desc"><span class="param-type">example: 1</span></div>
            <div class="param">title </div>
            <div class="param-desc"><span class="param-type"><a href="#string">String</a></span> </div>
            <div class="param-desc"><span class="param-type">example: Mc Donalds</span></div>
            <div class="param">document </div>
            <div class="param-desc"><span class="param-type"><a href="#BigDecimal">BigDecimal</a></span> </div>
            <div class="param-desc"><span class="param-type">example: 12345678912345</span></div>
            <div class="param">businessType </div>
            <div class="param-desc"><span class="param-type"><a href="#BusinessType">BusinessType</a></span> </div>
        </div> <!-- field-items -->
    </div>
</body>

</html>